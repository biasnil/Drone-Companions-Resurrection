DCO = {
    description = "DCO"
}

function DCO:new()
    addToList("BaseStatusEffect.FollowerDefeated.immunityStats", "DCO.FollowerDefeatedImmunity")
    createStat("DCO.FollowerDefeatedImmunity", "BaseStats.CanGrappleAndroids")
    createConstantStatModifier("DCO.FollowerDefeatedImmunityStat", "Additive", "DCO.FollowerDefeatedImmunity", 1)
end


function createFlyingDroneSandevistanAbility(recordName, toClone, slowtime, duration, conditionList)
    TweakDB:CloneRecord(recordName, toClone)
    TweakDB:SetFlatNoUpdate(recordName..".activationCondition", recordName.."_inline1")
    TweakDB:SetFlat(recordName..".subActions", {recordName.."_inline0"})
    TweakDB:CreateRecord(recordName.."_inline0", "gamedataAISubActionApplyTimeDilation_Record")
    TweakDB:SetFlatNoUpdate(recordName.."_inline0.duration", duration)
    TweakDB:SetFlatNoUpdate(recordName.."_inline0.multiplier", slowtime)
    TweakDB:SetFlatNoUpdate(recordName.."_inline0.easeOut","KereznikovDodgeEaseOut")
    TweakDB:SetFlat(recordName.."_inline0.overrideMultiplerWhenPlayerInTimeDilation", 3)
    TweakDB:CreateRecord(recordName.."_inline1", "gamedataAIActionCondition_Record")
    TweakDB:SetFlat(recordName.."_inline1.condition", recordName.."_inline2")
    TweakDB:CreateRecord(recordName.."_inline3", "gamedataAIActionAND_Record")
    TweakDB:SetFlat(recordName.."_inline3.AND", conditionList)
end

function createOnHitEffect(recordName, duration)
    TweakDB:CreateRecord(recordName.."OnHitSE", "gamedataStatusEffect_Record")
    TweakDB:SetFlatNoUpdate(recordName.."OnHitSE.duration", recordName.."OnHitSE_inline0")
    TweakDB:SetFlatNoUpdate(recordName.."OnHitSE.isAffectedByTimeDilationNPC", true)
    TweakDB:SetFlatNoUpdate(recordName.."OnHitSE.isAffectedByTimeDilationPlayer", true)
    TweakDB:SetFlatNoUpdate(recordName.."OnHitSE.savable", true)
    TweakDB:SetFlat(recordName.."OnHitSE.statusEffectType", "BaseStatusEffectTypes.Misc")
    TweakDB:CreateRecord(recordName.."OnHitSE_inline0", "gamedataStatModifierGroup_Record")
    TweakDB:SetFlatNoUpdate(recordName.."OnHitSE_inline0.statModsLimit", -1)
    TweakDB:SetFlat(recordName.."OnHitSE_inline0.statModifiers", {recordName.."OnHitSE_inline1"})
    createConstantStatModifier(recordName.."OnHitSE_inline1", "Additive", "BaseStats.MaxDuration", duration)
    TweakDB:CreateRecord(recordName.."OnHit", "gamedataGameplayAbility_Record")
    TweakDB:SetFlat(recordName.."OnHit.abilityPackage", recordName.."OnHit_inline0")
    TweakDB:CreateRecord(recordName.."OnHit_inline0", "gamedataGameplayLogicPackage_Record")
    TweakDB:SetFlat(recordName.."OnHit_inline0.effectors", {recordName.."OnHit_inline1"})
    TweakDB:CreateRecord(recordName.."OnHit_inline1", "gamedataApplyStatusEffectEffector_Record")
    TweakDB:SetFlatNoUpdate(recordName.."OnHit_inline1.count", 1)
    TweakDB:SetFlatNoUpdate(recordName.."OnHit_inline1.effectorClassName", "ApplyStatusEffectEffector")
    TweakDB:SetFlatNoUpdate(recordName.."OnHit_inline1.statusEffect", recordName.."OnHitSE")
    TweakDB:SetFlat(recordName.."OnHit_inline1.prereqRecord", recordName.."OnHit_inline2")
    TweakDB:CreateRecord(recordName.."OnHit_inline2", "gamedataMultiPrereq_Record")
    TweakDB:SetFlat(recordName.."OnHit_inline2.aggregationType", "AND")
    TweakDB:SetFlat(recordName.."OnHit_inline2.nestedPrereqs", {recordName.."OnHit_inline3"})
    TweakDB:SetFlat(recordName.."OnHit_inline2.prereqClassName", "gameMultiPrereq")
    TweakDB:CloneRecord(recordName.."OnHit_inline3", "Items.ElectroshockMechanismEffector_inline0")
end

function fastTravelTeleport()
    pos = Game.GetPlayer():GetWorldPosition()
    pos.x = pos.x-0.2
    for i,v in ipairs(Game.GetCompanionSystem():GetSpawnedEntities()) do
        if TweakDBInterface.GetCharacterRecord(v:GetRecordID()):TagsContains(CName.new("Robot")) and not (v:GetNPCType() == gamedataNPCType.Mech) and not v:IsDead() then
            cmd = AITeleportCommand:new()
            cmd.position = pos
            cmd.doNavTest = false
            AIComponent.SendCommand(v, cmd)
            if v:GetNPCType() == gamedataNPCType.Drone then
                v:QueueEvent(CreateForceRagdollEvent(CName.new("ForceRagdollTask")))
            end
            pos.x = pos.x + 0.1
        end
    end
end

function createDroneEquipment(recordName, basicweapon, advancedweapon)
    TweakDB:CreateRecord(recordName.."PrimaryEquipment", "gamedataNPCEquipmentGroup_Record")
    TweakDB:SetFlat(recordName.."PrimaryEquipment.equipmentItems", {recordName.."PrimaryPool"})
    TweakDB:CreateRecord(recordName.."PrimaryPool", "gamedataNPCEquipmentItemPool_Record")
    TweakDB:SetFlat(recordName.."PrimaryPool.pool", {recordName.."PrimaryPoolEntryBasic", recordName.."PrimaryPoolEntryAdvanced"})
    TweakDB:CreateRecord(recordName.."PrimaryPoolEntryBasic", "gamedataNPCEquipmentItemsPoolEntry_Record")
    TweakDB:SetFlatNoUpdate(recordName.."PrimaryPoolEntryBasic.weight", 1)
    TweakDB:SetFlat(recordName.."PrimaryPoolEntryBasic.items", {recordName.."PrimaryPoolEntryBasic_inline1"})
    TweakDB:CreateRecord(recordName.."PrimaryPoolEntryBasic_inline1", "gamedataNPCEquipmentItem_Record")
    TweakDB:SetFlatNoUpdate(recordName.."PrimaryPoolEntryBasic_inline1.equipSlot", "AttachmentSlots.WeaponRight")
    TweakDB:SetFlat(recordName.."PrimaryPoolEntryBasic_inline1.item", basicweapon)
    TweakDB:CreateRecord(recordName.."PrimaryPoolEntryAdvanced", "gamedataNPCEquipmentItemsPoolEntry_Record")
    TweakDB:SetFlatNoUpdate(recordName.."PrimaryPoolEntryAdvanced.weight", 69420)
    TweakDB:SetFlat(recordName.."PrimaryPoolEntryAdvanced.items", {recordName.."PrimaryPoolEntryAdvanced_inline1"})
    TweakDB:CreateRecord(recordName.."PrimaryPoolEntryAdvanced_inline1", "gamedataNPCEquipmentItem_Record")
    TweakDB:SetFlatNoUpdate(recordName.."PrimaryPoolEntryAdvanced_inline1.equipSlot", "AttachmentSlots.WeaponRight")
    TweakDB:SetFlat(recordName.."PrimaryPoolEntryAdvanced_inline1.item", advancedweapon)
end

function createExplosiveDroneWeapon(recordName, weaponClone, effectClone, projectileClone, explodeClone, bulletDamage, explosionDamage)
    TweakDB:CloneRecord(recordName, weaponClone)
    TweakDB:SetFlatNoUpdate(recordName..".rangedAttacks", recordName.."_inline0")
    addListToList(recordName, "attacks", {recordName.."_inline2", recordName.."_inline3"})
    TweakDB:CreateRecord(recordName.."_inline0", "gamedataRangedAttackPackage_Record")
    TweakDB:SetFlatNoUpdate(recordName.."_inline0.chargeFire", recordName.."_inline1")
    TweakDB:SetFlat(recordName.."_inline0.defaultFire", recordName.."_inline1")
    TweakDB:CreateRecord(recordName.."_inline1", "gamedataRangedAttack_Record")
    TweakDB:SetFlatNoUpdate(recordName.."_inline1.NPCAttack", recordName.."_inline3")
    TweakDB:SetFlatNoUpdate(recordName.."_inline1.NPCTimeDilated", recordName.."_inline2")
    TweakDB:SetFlatNoUpdate(recordName.."_inline1.playerAttack", recordName.."_inline3")
    TweakDB:SetFlat(recordName.."_inline1.playerTimeDilated", recordName.."_inline2")
    TweakDB:CloneRecord(recordName.."_inline2", projectileClone)
    TweakDB:SetFlat(recordName.."_inline2.explosionAttack", recordName.."_inline4")
    TweakDB:SetFlat(recordName.."_inline2.hitCooldown", 0.1, 'Float')
    addToList(recordName.."_inline2.statModifiers", recordName.."_inline6")
    TweakDB:CloneRecord(recordName.."_inline3", effectClone)
    TweakDB:SetFlat(recordName.."_inline3.explosionAttack", recordName.."_inline4")
    addToList(recordName.."_inline3.statModifiers", recordName.."_inline6")
    TweakDB:CloneRecord(recordName.."_inline4", explodeClone)
    TweakDB:SetFlatNoUpdate(recordName.."_inline4.playerIncomingDamageMultiplier", 1)
    TweakDB:SetFlatNoUpdate(recordName.."_inline4.range", 2)
    addToList(recordName.."_inline4.statModifiers", recordName.."_inline5")
    createConstantStatModifier(recordName.."_inline5", "Multiplier", "BaseStats.PhysicalDamage", explosionDamage)
    createConstantStatModifier(recordName.."_inline6", "Multiplier", "BaseStats.PhysicalDamage", bulletDamage)
end

function createAndroidSandevistanDash(recordName, toClone)
    TweakDB:CloneRecord(recordName, toClone)
    TweakDB:SetFlatNoUpdate(recordName..".activationCondition", recordName.."_inline2")
    TweakDB:SetFlat(recordName..".animData", recordName.."_inline0")
    TweakDB:CloneRecord(recordName.."_inline0", TweakDB:GetFlat(toClone..".animData"))
    TweakDB:SetFlat(recordName.."_inline0.animVariationSubAction", recordName.."_inline1")
    TweakDB:CreateRecord(recordName.."_inline1", "gamedataAISubActionRandomize_Record")
    TweakDB:SetFlat(recordName.."_inline1.animVariationRandomize", {0, 0})
    TweakDB:CloneRecord(recordName.."_inline2", TweakDB:GetFlat(toClone..".activationCondition"))
    TweakDB:SetFlat(recordName.."_inline2.condition", recordName.."_inline3")
    TweakDB:CloneRecord(recordName.."_inline3", TweakDB:GetFlat(TweakDB:GetFlat(toClone..".activationCondition")..".condition"))
    addToList(recordName.."_inline3.AND", "Condition.Android")
end

function createAndroidSEGrenade(recordName, toClone, damage, damageType, attackRecord)
    TweakDB:CloneRecord(recordName, toClone)
    TweakDB:SetFlatNoUpdate(recordName..".deliveryMethod", "DCO.HomingGDM")
    TweakDB:SetFlat(recordName..".attack", recordName.."_inline0")
    TweakDB:CloneRecord(recordName.."_inline0", TweakDB:GetFlat(toClone..".attack"))
    TweakDB:SetFlat(recordName.."_inline0.statusEffects", {recordName.."_inline1"})
    TweakDB:CloneRecord(recordName.."_inline1", gf(gf(toClone..".attack")..".statusEffects")[1])
    TweakDB:SetFlat(recordName.."_inline1.statusEffect", recordName.."_inline2")
    TweakDB:CloneRecord(recordName.."_inline2", gf(gf(gf(toClone..".attack")..".statusEffects")[1]..".statusEffect"))
    addToList(recordName.."_inline2.packages", recordName.."_inline3")
    TweakDB:CreateRecord(recordName.."_inline3", "gamedataGameplayLogicPackage_Record")
    TweakDB:SetFlat(recordName.."_inline3.effectors", {recordName.."_inline4"})
    TweakDB:CloneRecord(recordName.."_inline4", "BaseStatusEffect.LightPoision_inline9")
    TweakDB:SetFlat(recordName.."_inline4.attackRecord", recordName.."_inline5")
    TweakDB:CloneRecord(recordName.."_inline5", attackRecord)
    addToList(recordName.."_inline5.statModifiers", recordName.."_inline6")
    createConstantStatModifier(recordName.."_inline6", "Multiplier", damageType, damage)
end

function gf(flat)
    return TweakDB:GetFlat(flat)
end

function createAndroidDamageGrenade(recordName, toClone, damage)
    TweakDB:CloneRecord(recordName, toClone)
    TweakDB:SetFlat(recordName..".attack", recordName.."_inline0")
    TweakDB:CloneRecord(recordName.."_inline0", TweakDB:GetFlat(toClone..".attack"))
    addToList(recordName.."_inline0.statModifiers", recordName.."_inline1")
    createConstantStatModifier(recordName.."_inline1", "Multiplier", "BaseStats.PhysicalDamage", damage)
end

function createTargetHPCondition(recordName, maxhp, minhp)
    TweakDB:CreateRecord(recordName, "gamedataAIStatPoolCond_Record")
    TweakDB:SetFlatNoUpdate(recordName..".isIncreasing", -1)
    perc = Vector2:new()
    perc.X = minhp
    perc.Y = maxhp
    TweakDB:SetFlatNoUpdate(recordName..".percentage", perc)
    TweakDB:SetFlatNoUpdate(recordName..".statPool", "BaseStatPools.Health")
    TweakDB:SetFlat(recordName..".target", "AIActionTarget.CombatTarget")
end

function createAndroidGrenadeAction(recordName, toClone, grenade, conditionstemp, cooldownName)
    local conditions = {}
    for i,v in ipairs(conditionstemp) do
        table.insert(conditions, v)
    end
    TweakDB:CloneRecord(recordName, toClone)
    TweakDB:SetFlatNoUpdate(recordName..".activationCondition", recordName.."_inline1")
    TweakDB:SetFlatNoUpdate(recordName..".tickets", {})
    TweakDB:SetFlatNoUpdate(recordName..".cooldowns", {recordName.."_inline3", "DCO.ThrowGrenadeCooldown"})
    TweakDB:SetFlat(recordName..".startupSubActions", {recordName.."_inline0"})
    TweakDB:CloneRecord(recordName.."_inline0", TweakDB:GetFlat(toClone..".startupSubActions")[1])
    TweakDB:SetFlat(recordName.."_inline0.itemID", grenade)
    TweakDB:CreateRecord(recordName.."_inline1", "gamedataAIActionCondition_Record")
    TweakDB:SetFlat(recordName.."_inline1.condition", recordName.."_inline2")
    table.insert(conditions, recordName.."_inline4")
    table.insert(conditions, "DCO.ThrowGrenadeCooldown_inline0")
    TweakDB:CreateRecord(recordName.."_inline2", "gamedataAIActionAND_Record")
    TweakDB:SetFlat(recordName.."_inline2.AND", conditions)
    TweakDB:CreateRecord(recordName.."_inline3", "gamedataAIActionCooldown_Record")
    TweakDB:SetFlatNoUpdate(recordName.."_inline3.duration", 60)
    TweakDB:SetFlat(recordName.."_inline3.name", cooldownName)
    TweakDB:CreateRecord(recordName.."_inline4", "gamedataAICooldownCond_Record")
    TweakDB:SetFlat(recordName.."_inline4.cooldowns", {recordName.."_inline3"})
end

function createSEHackCond(recordName, SE)
    TweakDB:CreateRecord(recordName, "gamedataAIStatusEffectCond_Record")
    TweakDB:SetFlatNoUpdate(recordName..".statusEffect", SE)
    TweakDB:SetFlatNoUpdate(recordName..".invert", true)
    TweakDB:SetFlat(recordName..".target", "AIActionTarget.CombatTarget")
end

function addStatusEffectNotPresentCond(condition, SE)
    TweakDB:CreateRecord(condition.."SECond", "gamedataAIStatusEffectCond_Record")
    TweakDB:SetFlatNoUpdate(condition.."SECond.statusEffect", SE)
    TweakDB:SetFlatNoUpdate(condition.."SECond.invert", true)
    TweakDB:SetFlat(condition.."SECond.target", "AIActionTarget.CombatTarget")
    addToList(condition..".AND", condition.."SECond")
end

function makeSpreadEffectors(objectAction, count)
    createConstantStatModifier(objectAction.."SpreadTime", "Additive", "BaseStats.MaxDuration", 1)
    for i=1, count do
        TweakDB:CloneRecord(objectAction..i, objectAction)
        TweakDB:SetFlat(objectAction..i..".activationTime", {objectAction.."SpreadTime"})
        TweakDB:SetFlat(objectAction..i..".isQuickHack", true)
    end
    addToList(objectAction..".completionEffects", objectAction.."Effect")
    TweakDB:CloneRecord(objectAction.."Effect", "QuickHack.MadnessLvl3Hack_inline1")
    TweakDB:SetFlat(objectAction.."Effect"..".effectorToTrigger", objectAction.."Effect".."SpreadEffector")
    TweakDB:CloneRecord(objectAction.."Effect".."SpreadEffector", "QuickHack.MadnessLvl3Hack_inline2")
    TweakDB:SetFlat(objectAction.."Effect".."SpreadEffector.objectAction", objectAction.."1")
    for i=1,(count-1) do
        addToList(objectAction..i..".completionEffects", objectAction.."Effect"..i)
        TweakDB:CloneRecord(objectAction.."Effect"..i, "QuickHack.MadnessLvl3Hack_inline1")
        TweakDB:SetFlat(objectAction.."Effect"..i..".effectorToTrigger", objectAction.."Effect"..i.."SpreadEffector")
        TweakDB:CloneRecord(objectAction.."Effect"..i.."SpreadEffector", "QuickHack.MadnessLvl3Hack_inline2")
        TweakDB:SetFlat(objectAction.."Effect"..i.."SpreadEffector.objectAction", objectAction..(i+1))
    end
end

function createHackCooldown(recordName, baseRecord, cooldown)
    TweakDB:CloneRecord(recordName, baseRecord)
    TweakDB:SetFlat(recordName..".duration", cooldown)
end

function createContinuousAttack(SE, damageType, attackRecord, strength)
    TweakDB:SetFlat(SE..".packages", {SE.."_inline0"})
    TweakDB:CloneRecord(SE.."_inline0", "AIQuickHackStatusEffect.HackOverheat_inline0")
    TweakDB:SetFlat(SE.."_inline0.effectors", {SE.."_inline1"})
    TweakDB:CloneRecord(SE.."_inline1", "AIQuickHackStatusEffect.HackOverheat_inline1")
    TweakDB:SetFlatNoUpdate(SE.."_inline1.prereqRecord", "Prereqs.AlwaysTruePrereq")
    TweakDB:SetFlatNoUpdate(SE.."_inline1.attackRecord", SE.."_inline2")
    TweakDB:CloneRecord(SE.."_inline2", attackRecord)
    TweakDB:SetFlatNoUpdate(SE.."_inline2.effectName", "damage_over_time")
    TweakDB:SetFlatNoUpdate(SE.."_inline2.effectTag", "default")
    TweakDB:SetFlat(SE.."_inline2.statModifiers", {SE.."_inline3", SE.."_inline4"})
    TweakDB:CloneRecord(SE.."_inline3", "Character.NPC_Base_Curves_inline1")
    TweakDB:SetFlatNoUpdate(SE.."_inline3.refObject", "Root")
    TweakDB:SetFlat(SE.."_inline3.statType", damageType)
    createConstantStatModifier(SE.."_inline4", "Multiplier", damageType, strength)
end

function createHackStatusEffect(recordName, cloneSE, duration)
    TweakDB:CloneRecord(recordName, cloneSE)
    TweakDB:SetFlatNoUpdate(recordName..".gameplayTags", {"Debuff", "NPCQuickhack"})
    TweakDB:SetFlat(recordName..".duration", recordName.."Duration")
    TweakDB:CreateRecord(recordName.."Duration", "gamedataStatModifierGroup_Record")
    TweakDB:SetFlatNoUpdate(recordName.."Duration.statModsLimit", -1)
    TweakDB:SetFlat(recordName.."Duration.statModifiers", {recordName.."DurationStat"})
    createConstantStatModifier(recordName.."DurationStat", "Additive", "BaseStats.MaxDuration", duration)
end

function createAndroidCoverHack(recordName, toClone)
    TweakDB:CloneRecord(recordName, toClone)
    TweakDB:SetFlatNoUpdate(recordName..".animData", gf("NetrunnerActions.CoverHackOverheat.animData"))
    TweakDB:SetFlatNoUpdate(recordName..".recovery", gf("NetrunnerActions.CoverHackOverheat.recovery"))
    TweakDB:SetFlatNoUpdate(recordName..".startup", gf("NetrunnerActions.CoverHackOverheat.startup"))
    TweakDB:SetFlatNoUpdate(recordName..".subActions", gf("NetrunnerActions.CoverHackOverheat.subActions"))
    TweakDB:SetFlat(recordName..".loop", recordName.."_inline0")
    TweakDB:CloneRecord(recordName.."_inline0", "NetrunnerActions.CoverHackAction_inline5")
    TweakDB:SetFlat(recordName.."_inline0.toNextPhaseCondition", {recordName.."_inline1"})
    TweakDB:CreateRecord(recordName.."_inline1", "gamedataAIActionCondition_Record")
    TweakDB:SetFlat(recordName.."_inline1.condition", recordName.."_inline2")
    TweakDB:CloneRecord(recordName.."_inline2", "NetrunnerActions.CoverHackAction_inline8")
    addToList(recordName.."_inline2.OR", toClone.."_inline9")
end

function createAndroidHack(recordName, statusEffect, uploadTime, cooldown)
    TweakDB:CloneRecord(recordName, "NetrunnerActions.HackOverheat")
    TweakDB:SetFlatNoUpdate(recordName..".activationCondition", recordName.."_inline4")
    TweakDB:SetFlatNoUpdate(recordName..".cooldowns", {cooldown, "DCO.NetrunnerHackCooldown"})
    TweakDB:SetFlatNoUpdate(recordName..".tickets", {})
    TweakDB:SetFlatNoUpdate(recordName..".loop", recordName.."_inline6")
    TweakDB:SetFlat(recordName..".loopSubActions", {"NetrunnerActions.HackAction_inline2", "NetrunnerActions.HackAction_inline3", recordName.."_inline0"})
    TweakDB:CloneRecord(recordName.."_inline6", "NetrunnerActions.HackAction_inline6")
    TweakDB:SetFlat(recordName.."_inline6.toNextPhaseCondition", {recordName.."_inline7"})
    TweakDB:CloneRecord(recordName.."_inline7", "NetrunnerActions.HackAction_inline8")
    TweakDB:SetFlat(recordName.."_inline7.condition", recordName.."_inline8")
    TweakDB:CloneRecord(recordName.."_inline8", "NetrunnerActions.HackAction_inline9")
    addToList(recordName.."_inline8.OR", recordName.."_inline9")
    TweakDB:CreateRecord(recordName.."_inline9", "gamedataAICooldownCond_Record")
    TweakDB:SetFlat(recordName.."_inline9.cooldowns", {cooldown})
    TweakDB:CreateRecord(recordName.."_inline4", "gamedataAIActionCondition_Record")
    TweakDB:SetFlat(recordName.."_inline4.condition", recordName.."_inline5")
    TweakDB:CreateRecord(recordName.."_inline5", "gamedataAIActionAND_Record")
    TweakDB:SetFlat(recordName.."_inline5.AND", {"Condition.Android", "DCO.NotTargetHasMadness"})
    TweakDB:CloneRecord(recordName.."_inline0", "NetrunnerActions.HackOverheat_inline3")
    TweakDB:SetFlat(recordName.."_inline0.actionResult", recordName.."_inline1")
    TweakDB:CloneRecord(recordName.."_inline1", "AIQuickHack.HackOverheat")
    TweakDB:SetFlatNoUpdate(recordName.."_inline1.activationTime", {recordName.."_inline2"})
    TweakDB:SetFlat(recordName.."_inline1.completionEffects", {recordName.."_inline3"})
    TweakDB:SetFlat(recordName.."_inline1.isQuickHack", true)
    createConstantStatModifier(recordName.."_inline2", "Additive", "BaseStats.MaxDuration", uploadTime)
    TweakDB:CloneRecord(recordName.."_inline3", "AIQuickHack.HackOverheat_inline1")
    TweakDB:SetFlat(recordName.."_inline3.statusEffect", statusEffect)
end

function createEquipAI(recordName, itemType)
    TweakDB:CloneRecord(recordName.."", "VehicleActions.EquipAnyRifleFromInventory")
    TweakDB:SetFlat(recordName..".activationCondition", recordName.."_inline0")
    TweakDB:SetFlat(recordName..".loopSubActions", {recordName.."_inline4"})
    TweakDB:CreateRecord(recordName.."_inline0", "gamedataAIActionCondition_Record")
    TweakDB:SetFlat(recordName.."_inline0.condition", recordName.."_inline1")
    TweakDB:CreateRecord(recordName.."_inline1", "gamedataAIActionAND_Record")
    TweakDB:SetFlat(recordName.."_inline1.AND", {recordName.."_inline8", recordName.."_inline2"})
    TweakDB:CreateRecord(recordName.."_inline2", "gamedataAIActionOR_Record")
    TweakDB:SetFlat(recordName.."_inline2.OR", {recordName.."_inline3", recordName.."_inline5"})
    TweakDB:CloneRecord(recordName.."_inline3", "Condition.HasPrimaryEquipmentRifleInInventory")
    TweakDB:SetFlat(recordName.."_inline3.itemType", itemType)
    TweakDB:CloneRecord(recordName.."_inline4", "VehicleActions.EquipAnyRifleFromInventory_inline5")
    TweakDB:SetFlat(recordName.."_inline4.itemType", itemType)
    TweakDB:CreateRecord(recordName.."_inline5", "gamedataAIActionOR_Record")
    TweakDB:SetFlat(recordName.."_inline5.OR", {recordName.."_inline6", recordName.."_inline7"})
    TweakDB:CloneRecord(recordName.."_inline6", "Condition.HasRifle_inline0")
    TweakDB:SetFlat(recordName.."_inline6.itemType", itemType)
    TweakDB:CloneRecord(recordName.."_inline7", "Condition.HasRifle_inline1")
    TweakDB:SetFlat(recordName.."_inline7.itemType", itemType)
    TweakDB:CloneRecord(recordName.."_inline8", recordName.."_inline5")
    TweakDB:SetFlat(recordName.."_inline8.invert", true)
end

return DCO:new()
